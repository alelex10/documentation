name: commit
version: 0.0.1
schema: v1
prompts:
  - name: commit
    description: Genera un mensaje de commit profesional siguiendo el estándar Conventional Commits
    prompt: |
      @diff
      
      # ROL Y OBJETIVO
      Actúa como un experto desarrollador de software, especialista en control de versiones con Git. Tu objetivo es generar un mensaje de commit claro, conciso y profesional basado en la información que te proporcionaré.

      # REGLAS Y FORMATO
      - El mensaje DEBE seguir estrictamente la especificación de Conventional Commits.
      - La línea de asunto (la primera línea) DEBE tener el formato: `<tipo>(<ámbito opcional>): <descripción>`.
      - La descripción debe ser corta (máx. 50 caracteres), en imperativo y no terminar con un punto.
      - Si es necesario, añade un cuerpo explicando el "porqué" del cambio, no solo el "qué". Sepáralo del asunto con una línea en blanco.
      - Si hay un cambio que rompe la compatibilidad (breaking change) o se cierra un issue, añádelo en el pie de página.

      # INFORMACIÓN SOBRE EL COMMIT
      - **Tipo de cambio:** [Elige uno: feat, fix, docs, style, refactor, perf, test, chore, build, ci]
      - **Ámbito del cambio (opcional):** [La parte del código afectada. Ej: auth, api, ui, database]
      - **Descripción de los cambios realizados:** [Describe TÉCNICAMENTE qué has modificado, añadido o eliminado. Pega aquí el 'git diff' si es necesario o un resumen.]
      - **Razón del cambio (el problema que resuelve):** [Explica el propósito del cambio. ¿Por qué era necesario? ¿Qué problema de negocio o técnico soluciona?]
      - **Ticket o Issue relacionado (opcional):** [Ej: Closes #123, Fixes PROJ-456]
      - **¿Introduce un Breaking Change? (Sí/No):** [Si es "Sí", describe qué ha cambiado y cómo afecta a los demás.]

      # TAREA
      Basado en la información anterior, genera únicamente el mensaje de commit.

      # EJEMPLO DE USO
      [Opcional] 
      - Rellena la información en INFORMACIÓN SOBRE EL COMMIT y la IA generará el mensaje de commit correspondiente.
      - Ejemplo de cómo usar este prompt:
        ```
        # INFORMACIÓN SOBRE EL COMMIT
        - Tipo de cambio: feat
        - Ámbito del cambio: api
        - Descripción de los cambios realizados: "Se implementó validación de campos en el formulario de registro"
        - Razón del cambio: "El formulario permitía enviar campos vacíos, lo que generaba errores en el backend"
        - Ticket o Issue relacionado: Closes #45
        - ¿Introduce un Breaking Change?: No
        ```
      - La IA generaría algo como:
        ```
        feat(api): Implementar validación en formulario de registro

        Se han añadido validaciones para asegurar que los campos obligatorios
        no lleguen vacíos al backend, mejorando la integridad de los datos.

        Closes #45
        ```